# Importing the required Libraries
import streamlit as st
import pickle
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler 
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go



# Importing the learned model
pickle_in = open("model.pk1", "rb")
classifier = pickle.load(pickle_in)

# Setting the Configuration of the Page
st.set_page_config(layout = "wide")



# Starting with Content to be displayed on the screen
st.markdown("""# Predicting Heart Disease""", unsafe_allow_html = True) 
    
st.divider()
st.subheader('Aim:')
st.write('The goal of this project is to help people identify high-risk candidates and prevent adverse selection.')  
st.divider()
st.subheader('Note:')
st.write('Kindly note that the results generated by this model are intended solely for educational purposes. \
         It is strongly recommended that the outputs from this model should not be solely relied upon for any practical or decision-making purposes.')
st.divider()



def prediction_label(x):
    prediction_label = classifier.predict(x)
    return prediction_label
    
def prediction_proba(x):
    prediction_proba=classifier.predict_proba(x)[:, 1]
    return prediction_proba

    
def main():
    # with st.sidebar:
    scaler = MinMaxScaler()
    
    # Starting Headline
    st.markdown("""# Please answer the following medical questions :male-doctor::""" , unsafe_allow_html = True) 

    
    ## Gender
    male = 0
    gender_class = ['Male', 'Female']
    gender = st.radio('Gender', gender_class)
    if gender == 'Male':
        male = 1 
    else:
        male = 0
    
    ## Age (age)
    age = 0
    age = st.slider('Age', min_value = 0, max_value = 100, value = 0, step = 1)

    ## Cigarettes Per Day (cigsPerDay)
    cigsPerDay = st.slider('Daily Cigarette Consumption', min_value = 0, max_value = 40, value = 0, step = None)
    
    ## Blood Pressure Medicines (BPMeds)
    BPMeds = 0
    BPMeds_answers = ['Yes', 'No']
    BPMeds_response = st.radio('Have you taken Blood Pressure Medicine before?', BPMeds_answers)
    if BPMeds_response == 'Yes':
        BPMeds = 1 
    else:
        BPMeds = 0
        
    ## Prevalent Stroke (prevalentStroke)
    prevalentStroke = 0
    prevalentStroke_answers = ['Yes', 'No']
    prevalentStroke_response = st.radio('Have you experienced stroke in the past?', prevalentStroke_answers)
    if  prevalentStroke_response == 'Yes':
        prevalentStroke = 1 
    else:
        prevalentStroke = 0
    
    
    ## Prevalent Hypertensive Heart Disease (prevalentHyp)
    prevalentHyp = 0
    prevalentHyp_answers = ['Yes', 'No']
    prevalentHyp_response = st.radio('Do you have any Hypertensive Heart Disease, such as High Blood Pressure?', prevalentHyp_answers)
    if prevalentHyp_response == 'Yes':
        prevalentHyp = 1 
    else:
        prevalentHyp = 0
    

    
    ##diabetes
    diabetes=0
    diabetes_answers = ['Yes', 'No']
    diabetes_response = st.radio('Do you have Diabetes?', diabetes_answers)
    if diabetes_response == 'Yes':
        diabetes = 1 
    else:
        diabetes = 0
    
    #totChol
    totChol = st.slider('What is your Total Cholesterol Level? \
                        (according to  Johns Hopkins Medicine, \
                            ranges for total cholesterol in adults:- \
                            Normal: Less than 200 mg/dL; \
                            Borderline high: 200 to 239 mg/dL;\
                            High: At or above 240 mg/dL).',min_value=50, max_value=400, value=0, step=10)
    

    #sysBP
    sysBP = st.slider('What is your Systolic Blood Pressure Level? \
                        (according to American Heart Association (AHA):- \
                        Normal: less than 120 mmHg, Elevated: 120-129 mmHg, \
                        Stage 1 hypertension: 130-139 mmHg, \
                        Stage 2 hypertension: 140 mmHg or higher)',min_value=50, max_value=200, value=0, step=10)
    


    #diaBP
    diaBP = 0
    diaBP = st.slider('What is the range for Diastolic Blood Pressure? \
                        (according to American Heart Association (AHA):- \
                        Normal: less than 80 mmHg, Elevated: 80-89 mmHg,\
                        Stage 1 hypertension: 90-99 mmHg, \
                        Stage 2 hypertension: 100 mmHg or higher)',min_value=50, max_value=140, value=0, step=10)
    

    #BMI
    BMI = 0
    BMI = st.slider('What is your Body Mass Index (BMI)? \
                    (according to World Health Organization (WHO):-\
                        Underweight: less than 18.5, Normal weight: 18.5-24.9, \
                        Overweight: 25-29.9, Obesity class I: 30-34.9, Obesity class II: 35-39.9,\
                        Obesity class III: 40 or higher)',min_value=10, max_value=50, value=0, step=1)


    #heartRate
    heartRate = 0 
    heartRate = st.slider('What is your Heart Rate per minute or Beats per minute (BPM)? \
                            (according to Bristish Heart Foundation:- \
                            a normal resting heart rate should be between 60 to 100 Beats per minute)'
                            ,min_value=40, max_value=150, value=0, step=None)
    
        
    
    # Considering the inputs provided as One-Dimensional Array
    X_test_continuous = {'age' : age, 
                            'cigsPerDay': cigsPerDay, 
                            'totChol':totChol, 
                            'sysBP': sysBP, 
                            'diaBP': diaBP, 
                            'BMI': BMI, 
                            'heartRate': heartRate
                            }
    df_test = pd.DataFrame(X_test_continuous, index = ['test'])
    
    # Reshaping the Data
    X_test_continuous_scaled = np.array(X_test_continuous).reshape(1,-1)
    
    # Scaling all
    df = pd.read_csv('data/framingham.csv')
    scaler = scaler.fit(df[['age', 'cigsPerDay', 'totChol', 'sysBP', 'diaBP', 'BMI', 'heartRate']])
    
    scaled_value = scaler.transform(df_test)
    
    # Defining Variables
    list_ = list()
    label = ""
    proba = ""
    
    # Obtaining Scaled Values
    age_sc, cigsPerDay_sc, totChol_sc, sysBP_sc, diaBP_sc, BMI_sc, heartRate_sc = scaled_value.flatten()
    age, cigsPerDay, totChol, sysBP, diaBP, BMI, heartRate =  age_sc, cigsPerDay_sc, totChol_sc, sysBP_sc, diaBP_sc, BMI_sc, heartRate_sc
    list_= [male, age, cigsPerDay, BPMeds, prevalentStroke, prevalentHyp, diabetes, totChol, sysBP, diaBP, BMI, heartRate]
    # end of the sidebar
    
    
    col1, col2 = st.columns([0.65,1])

    
    #if user click "predict"
    st.subheader('Result: ')
    st.write('Please click \'Predict\' button after you finish providing your information')
    if st.button("Predict"):
        label = prediction_label(np.array(list_).reshape(1,-1))
        proba = np.round(prediction_proba(np.array(list_).reshape(1,-1)) * 100, 2)
        #st.success('The result is {}'.format(label))
        st.warning(f'Your probaility of having CHD in the next 10 years is {proba}%')
        
    st.divider()
# end of the main() function

if __name__ == '__main__':
    main()